rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  	// Allow users to read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    // Items: Anyone can read, only admins can write
    match /items/{itemId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Servers: Users can read/write their own servers
    match /servers/{serverId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.owner_id;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.owner_id;
    }
    
    // Shops: Users can read/write their own shops, read public shops for comparison
    match /shops/{shopId} {
      allow read: if request.auth != null; // Allow reading all shops for comparison
      allow write: if request.auth != null && request.auth.uid == resource.data.owner_id;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.owner_id;
    }
    
    // Shop Prices: Users can read/write prices for their own shops, read public shop prices for comparison
    match /shop_prices/{priceId} {
      allow read: if request.auth != null; // Allow reading all shop prices for comparison
      allow write: if request.auth != null && 
        request.auth.uid == get(/databases/$(database)/documents/shops/$(resource.data.shop_id)).data.owner_id;
      allow create: if request.auth != null && 
        request.auth.uid == get(/databases/$(database)/documents/shops/$(request.resource.data.shop_id)).data.owner_id &&
        // Validate required fields
        request.resource.data.keys().hasAll(['shop_id', 'item_id', 'last_updated']) &&
        request.resource.data.shop_id is string &&
        request.resource.data.item_id is string &&
        request.resource.data.last_updated is string &&
        // Validate price values are null or positive numbers
        (request.resource.data.buy_price == null || 
         (request.resource.data.buy_price is number && request.resource.data.buy_price >= 0)) &&
        (request.resource.data.sell_price == null || 
         (request.resource.data.sell_price is number && request.resource.data.sell_price >= 0)) &&
        // Validate at least one price is provided
        (request.resource.data.buy_price != null || request.resource.data.sell_price != null) &&
        // Validate boolean fields
        request.resource.data.stock_full is bool;
    }
  }
}