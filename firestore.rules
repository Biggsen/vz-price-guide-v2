rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users: Allow user to read/write their own profile, allow admins to read all
    match /users/{userId} {
      // Allow authenticated users to read for username uniqueness checks
      allow get, list, read: if request.auth != null;
      // Only allow users to write to their own document
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    // Items: Anyone can read, only admins can write
    match /items/{itemId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    // Servers: Allow owner to read/write, allow admins to read all
    match /servers/{serverId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.owner_id ||
        request.auth.token.admin == true
      );
      allow write: if request.auth != null && request.auth.uid == resource.data.owner_id;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.owner_id;
    }
    // Shops: Allow owner to read/write, allow admins to read all
    match /shops/{shopId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.owner_id ||
        request.auth.token.admin == true
      );
      allow write: if request.auth != null && request.auth.uid == resource.data.owner_id &&
        (request.resource.data.owner_funds == null || 
         (request.resource.data.owner_funds is number && request.resource.data.owner_funds >= 0));
      allow create: if request.auth != null && request.auth.uid == request.resource.data.owner_id &&
        request.resource.data.keys().hasAll(['name', 'server_id', 'owner_id', 'is_own_shop']) &&
        request.resource.data.name is string &&
        request.resource.data.server_id is string &&
        request.resource.data.owner_id is string &&
        request.resource.data.is_own_shop is bool &&
        (request.resource.data.owner_funds == null || 
         (request.resource.data.owner_funds is number && request.resource.data.owner_funds >= 0));
    }
    // Shop Items: Allow authenticated users to read, only shop owner can write
    match /shop_items/{itemId} {
      allow read, list: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.uid == get(/databases/$(database)/documents/shops/$(resource.data.shop_id)).data.owner_id;
      allow create: if request.auth != null && 
        request.auth.uid == get(/databases/$(database)/documents/shops/$(request.resource.data.shop_id)).data.owner_id &&
        request.resource.data.keys().hasAll(['shop_id', 'item_id', 'last_updated']) &&
        request.resource.data.shop_id is string &&
        request.resource.data.item_id is string &&
        request.resource.data.last_updated is string &&
        (request.resource.data.buy_price == null || 
         (request.resource.data.buy_price is number && request.resource.data.buy_price >= 0)) &&
        (request.resource.data.sell_price == null || 
         (request.resource.data.sell_price is number && request.resource.data.sell_price >= 0)) &&
        (request.resource.data.buy_price != null || request.resource.data.sell_price != null) &&
        request.resource.data.stock_full is bool;
    }
    // Suggestions: Users can read/write their own, admins can read/update all
    match /suggestions/{suggestionId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow read, update: if request.auth != null && request.auth.token.admin == true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'userDisplayName', 'createdAt', 'status', 'title', 'body']) &&
        request.resource.data.title is string &&
        request.resource.data.body is string &&
        request.resource.data.status in ['open', 'in progress', 'closed', 'rejected'];
    }
  }
}